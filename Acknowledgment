                data = json.load(f) #AI


def save_data(): #AI
    try:
        serializable_booked = {
            date: [list(pair) for pair in slots_set]
            for date, slots_set in bookedSlots.items()
        }
        data = {
            "registeredUsers": registeredUsers,
            "userBookings": userBookings,
            "bookedSlots": serializable_booked,
        }
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2)
    except Exception as e:
        messagebox.showwarning("Save Error", f"Could not save data: {e}")

    global isLoggedIn #AI

def cancelSelectedBooking(): #HALF AI
    global bookedSlots, userBookings, currentUserEmail
    if not isLoggedIn or currentUserEmail not in userBookings:
        messagebox.showerror("Not Signed In", "Please sign in first.")
        return
    if not cancelSelection:
        messagebox.showinfo("Nothing Selected", "Select bookings first, then click Cancel.")
        return

showFrame(signInFrame)  #ai


#AI TO MAKE IT CENTRED
gridWrapper = ctk.CTkFrame(bookCourtFrame, fg_color="transparent")
gridWrapper.grid(row=1, column=0, pady=20)
gridWrapper.grid_columnconfigure(tuple(range(slotCount + 1)), weight=1)

def updateSlotColors(): #half ai
    if selectedDate is None:
        for btn in slotButtons.values():
            btn.configure(fg_color="grey", state="disabled", text="")
        return

    bookedForDate = bookedSlots.get(selectedDate, set())

    for court in range(courtCount):
        for slot in range(slotCount):
            key = (court, slot)
            btn = slotButtons[key]
            if key in bookedForDate:
                btn.configure(fg_color="red", text="Booked", state="disabled")
            else:
                if key in selectedSlots:
                    btn.configure(fg_color="yellow", text="", state="normal")
                else:
                    btn.configure(fg_color="green", text="", state="normal")

#Generate court and slot times AI
for court in range(courtCount):
    ctk.CTkLabel(gridWrapper, text=f"Court {court + 1}", fg_color="lightblue", width=100).grid(row=court + 1, column=0, padx=1, pady=1)

    rowButtons = []
    for slot in range(slotCount):
        btn = ctk.CTkButton(gridWrapper, text="", fg_color="green", width=100, height=40)
        btn.grid(row=court + 1, column=slot + 1, padx=1, pady=1)
        btn.configure(command=lambda c=court, s=slot: toggleSlot(c, s))
        rowButtons.append(btn)

    bookingButtons.append(rowButtons)
    slotButtons.update({(court, slot): btn for slot, btn in enumerate(rowButtons)})

    # Prevent sending obviously taken slots forward
    bookedForDate = bookedSlots.get(selectedDate, set())
    for pair in selectedSlots:
        if pair in bookedForDate:
            messagebox.showerror("Slot Taken", "One or more selected slots are already booked.")
            return

    # Stash selections for final confirmation on Payment tab
    pendingSelections = set(selectedSlots)
    pendingDate = selectedDate


    def paymentOK(): #half ai
    """Finalize the booking here when user clicks OK."""
    global bookedSlots, userBookings, pendingSelections, pendingDate, selectedSlots
    if not pendingSelections or pendingDate is None:
        showFrame(signInFrame)
        return

    # Commit the booking now
    if pendingDate not in bookedSlots:
        bookedSlots[pendingDate] = set()
    bookedSlots[pendingDate].update(pendingSelections)

    if currentUserEmail not in userBookings:
        userBookings[currentUserEmail] = []
    for court, slot in pendingSelections:
        userBookings[currentUserEmail].append({"date": pendingDate, "court": court, "slot": slot})

        # If we're still on the same date in the grid, mark buttons red
        if pendingDate == selectedDate and (court, slot) in slotButtons:
            btn = slotButtons[(court, slot)]
            btn.configure(fg_color="red", state="disabled", text="Booked")

    # Clear working selections & refresh UI
    selectedSlots.clear()
    pendingSelections.clear()
    # Keep pendingDate for the grid's current date; do not clear selectedDate
    displayBookings()
    updateSlotColors()
    updateTotalPrice()
    save_data()
